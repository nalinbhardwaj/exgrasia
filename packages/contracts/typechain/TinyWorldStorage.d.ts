/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TinyWorldStorageInterface extends ethers.utils.Interface {
  functions: {
    "cachedTiles(uint256,uint256)": FunctionFragment;
    "canMoveSnow(address)": FunctionFragment;
    "canMoveWater(address)": FunctionFragment;
    "canPutAnything(address)": FunctionFragment;
    "getCachedTile(tuple)": FunctionFragment;
    "getContractLocations(address)": FunctionFragment;
    "getPlayerIds()": FunctionFragment;
    "getPlayerInfos()": FunctionFragment;
    "getPlayerLocation(address)": FunctionFragment;
    "getTouchedTiles()": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "perlinMax()": FunctionFragment;
    "playerEmoji(address)": FunctionFragment;
    "playerIds(uint256)": FunctionFragment;
    "playerInited(address)": FunctionFragment;
    "playerLocation(address)": FunctionFragment;
    "playerPerm(address)": FunctionFragment;
    "seed()": FunctionFragment;
    "touchedCoords(uint256)": FunctionFragment;
    "validPlayerEmoji(string)": FunctionFragment;
    "vecs(uint256,uint256)": FunctionFragment;
    "vecsDenom()": FunctionFragment;
    "whitelistedContracts(uint256)": FunctionFragment;
    "worldScale()": FunctionFragment;
    "worldWidth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cachedTiles",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "canMoveSnow", values: [string]): string;
  encodeFunctionData(
    functionFragment: "canMoveWater",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPutAnything",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCachedTile",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractLocations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerLocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTouchedTiles",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "perlinMax", values?: undefined): string;
  encodeFunctionData(functionFragment: "playerEmoji", values: [string]): string;
  encodeFunctionData(
    functionFragment: "playerIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerInited",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "playerLocation",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "playerPerm", values: [string]): string;
  encodeFunctionData(functionFragment: "seed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "touchedCoords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validPlayerEmoji",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vecs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vecsDenom", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistedContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "worldScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "worldWidth",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cachedTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canMoveSnow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canMoveWater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canPutAnything",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCachedTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractLocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTouchedTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "perlinMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerEmoji",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playerIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerInited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playerPerm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "touchedCoords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validPlayerEmoji",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vecs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vecsDenom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "worldScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "worldWidth", data: BytesLike): Result;

  events: {};
}

export class TinyWorldStorage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TinyWorldStorageInterface;

  functions: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      owner: string;
      smartContract: string;
      lastPurchased: BigNumber;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: string;
      6: string;
      7: BigNumber;
    }>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      owner: string;
      smartContract: string;
      lastPurchased: BigNumber;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: string;
      6: string;
      7: BigNumber;
    }>;

    canMoveSnow(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canMoveSnow(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    canMoveWater(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canMoveWater(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    canPutAnything(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canPutAnything(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        temperatureType: number;
        altitudeType: number;
        owner: string;
        smartContract: string;
        lastPurchased: BigNumber;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
        4: number;
        5: number;
        6: string;
        7: string;
        8: BigNumber;
      };
    }>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        temperatureType: number;
        altitudeType: number;
        owner: string;
        smartContract: string;
        lastPurchased: BigNumber;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
        4: number;
        5: number;
        6: string;
        7: string;
        8: BigNumber;
      };
    }>;

    getContractLocations(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[];
    }>;

    "getContractLocations(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[];
    }>;

    getPlayerIds(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "getPlayerIds()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    getPlayerInfos(overrides?: CallOverrides): Promise<{
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[];
      1: string[];
      2: boolean[];
      3: boolean[];
      4: boolean[];
    }>;

    "getPlayerInfos()"(overrides?: CallOverrides): Promise<{
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[];
      1: string[];
      2: boolean[];
      3: boolean[];
      4: boolean[];
    }>;

    getPlayerLocation(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    "getPlayerLocation(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    getTouchedTiles(overrides?: CallOverrides): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        temperatureType: number;
        altitudeType: number;
        owner: string;
        smartContract: string;
        lastPurchased: BigNumber;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
        4: number;
        5: number;
        6: string;
        7: string;
        8: BigNumber;
      }[];
    }>;

    "getTouchedTiles()"(overrides?: CallOverrides): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        temperatureType: number;
        altitudeType: number;
        owner: string;
        smartContract: string;
        lastPurchased: BigNumber;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
        4: number;
        5: number;
        6: string;
        7: string;
        8: BigNumber;
      }[];
    }>;

    isAdmin(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAdmin(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    perlinMax(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "perlinMax()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    playerEmoji(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "playerEmoji(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    playerIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "playerIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    playerInited(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "playerInited(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    playerLocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "playerLocation(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    playerPerm(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "playerPerm(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    seed(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "seed()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    touchedCoords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "touchedCoords(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    validPlayerEmoji(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "validPlayerEmoji(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    vecs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "vecs(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    vecsDenom(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "vecsDenom()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    whitelistedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "whitelistedContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    worldScale(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "worldScale()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    worldWidth(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "worldWidth()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  cachedTiles(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    raritySeed: BigNumber;
    tileType: number;
    temperatureType: number;
    altitudeType: number;
    owner: string;
    smartContract: string;
    lastPurchased: BigNumber;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: BigNumber;
    2: number;
    3: number;
    4: number;
    5: string;
    6: string;
    7: BigNumber;
  }>;

  "cachedTiles(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    raritySeed: BigNumber;
    tileType: number;
    temperatureType: number;
    altitudeType: number;
    owner: string;
    smartContract: string;
    lastPurchased: BigNumber;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: BigNumber;
    2: number;
    3: number;
    4: number;
    5: string;
    6: string;
    7: BigNumber;
  }>;

  canMoveSnow(player: string, overrides?: CallOverrides): Promise<boolean>;

  "canMoveSnow(address)"(
    player: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canMoveWater(player: string, overrides?: CallOverrides): Promise<boolean>;

  "canMoveWater(address)"(
    player: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canPutAnything(player: string, overrides?: CallOverrides): Promise<boolean>;

  "canPutAnything(address)"(
    player: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getCachedTile(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    perlin: [BigNumber, BigNumber];
    raritySeed: BigNumber;
    tileType: number;
    temperatureType: number;
    altitudeType: number;
    owner: string;
    smartContract: string;
    lastPurchased: BigNumber;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: [BigNumber, BigNumber];
    2: BigNumber;
    3: number;
    4: number;
    5: number;
    6: string;
    7: string;
    8: BigNumber;
  }>;

  "getCachedTile(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    perlin: [BigNumber, BigNumber];
    raritySeed: BigNumber;
    tileType: number;
    temperatureType: number;
    altitudeType: number;
    owner: string;
    smartContract: string;
    lastPurchased: BigNumber;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: [BigNumber, BigNumber];
    2: BigNumber;
    3: number;
    4: number;
    5: number;
    6: string;
    7: string;
    8: BigNumber;
  }>;

  getContractLocations(
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

  "getContractLocations(address)"(
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

  getPlayerIds(overrides?: CallOverrides): Promise<string[]>;

  "getPlayerIds()"(overrides?: CallOverrides): Promise<string[]>;

  getPlayerInfos(overrides?: CallOverrides): Promise<{
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[];
    1: string[];
    2: boolean[];
    3: boolean[];
    4: boolean[];
  }>;

  "getPlayerInfos()"(overrides?: CallOverrides): Promise<{
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[];
    1: string[];
    2: boolean[];
    3: boolean[];
    4: boolean[];
  }>;

  getPlayerLocation(
    player: string,
    overrides?: CallOverrides
  ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }>;

  "getPlayerLocation(address)"(
    player: string,
    overrides?: CallOverrides
  ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }>;

  getTouchedTiles(
    overrides?: CallOverrides
  ): Promise<
    {
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      owner: string;
      smartContract: string;
      lastPurchased: BigNumber;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: string;
      7: string;
      8: BigNumber;
    }[]
  >;

  "getTouchedTiles()"(
    overrides?: CallOverrides
  ): Promise<
    {
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      owner: string;
      smartContract: string;
      lastPurchased: BigNumber;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: string;
      7: string;
      8: BigNumber;
    }[]
  >;

  isAdmin(player: string, overrides?: CallOverrides): Promise<boolean>;

  "isAdmin(address)"(
    player: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  perlinMax(overrides?: CallOverrides): Promise<number>;

  "perlinMax()"(overrides?: CallOverrides): Promise<number>;

  playerEmoji(arg0: string, overrides?: CallOverrides): Promise<string>;

  "playerEmoji(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  playerIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "playerIds(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  playerInited(player: string, overrides?: CallOverrides): Promise<boolean>;

  "playerInited(address)"(
    player: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  playerLocation(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    x: BigNumber;
    y: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "playerLocation(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    x: BigNumber;
    y: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  playerPerm(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "playerPerm(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seed(overrides?: CallOverrides): Promise<BigNumber>;

  "seed()"(overrides?: CallOverrides): Promise<BigNumber>;

  touchedCoords(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    x: BigNumber;
    y: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "touchedCoords(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    x: BigNumber;
    y: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  validPlayerEmoji(arg0: string, overrides?: CallOverrides): Promise<string>;

  "validPlayerEmoji(string)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  vecs(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "vecs(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  vecsDenom(overrides?: CallOverrides): Promise<number>;

  "vecsDenom()"(overrides?: CallOverrides): Promise<number>;

  whitelistedContracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "whitelistedContracts(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  worldScale(overrides?: CallOverrides): Promise<BigNumber>;

  "worldScale()"(overrides?: CallOverrides): Promise<BigNumber>;

  worldWidth(overrides?: CallOverrides): Promise<BigNumber>;

  "worldWidth()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      owner: string;
      smartContract: string;
      lastPurchased: BigNumber;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: string;
      6: string;
      7: BigNumber;
    }>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      owner: string;
      smartContract: string;
      lastPurchased: BigNumber;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: string;
      6: string;
      7: BigNumber;
    }>;

    canMoveSnow(player: string, overrides?: CallOverrides): Promise<boolean>;

    "canMoveSnow(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canMoveWater(player: string, overrides?: CallOverrides): Promise<boolean>;

    "canMoveWater(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canPutAnything(player: string, overrides?: CallOverrides): Promise<boolean>;

    "canPutAnything(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      owner: string;
      smartContract: string;
      lastPurchased: BigNumber;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: string;
      7: string;
      8: BigNumber;
    }>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      owner: string;
      smartContract: string;
      lastPurchased: BigNumber;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: string;
      7: string;
      8: BigNumber;
    }>;

    getContractLocations(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

    "getContractLocations(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

    getPlayerIds(overrides?: CallOverrides): Promise<string[]>;

    "getPlayerIds()"(overrides?: CallOverrides): Promise<string[]>;

    getPlayerInfos(overrides?: CallOverrides): Promise<{
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[];
      1: string[];
      2: boolean[];
      3: boolean[];
      4: boolean[];
    }>;

    "getPlayerInfos()"(overrides?: CallOverrides): Promise<{
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[];
      1: string[];
      2: boolean[];
      3: boolean[];
      4: boolean[];
    }>;

    getPlayerLocation(
      player: string,
      overrides?: CallOverrides
    ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }>;

    "getPlayerLocation(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }>;

    getTouchedTiles(
      overrides?: CallOverrides
    ): Promise<
      {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        temperatureType: number;
        altitudeType: number;
        owner: string;
        smartContract: string;
        lastPurchased: BigNumber;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
        4: number;
        5: number;
        6: string;
        7: string;
        8: BigNumber;
      }[]
    >;

    "getTouchedTiles()"(
      overrides?: CallOverrides
    ): Promise<
      {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        temperatureType: number;
        altitudeType: number;
        owner: string;
        smartContract: string;
        lastPurchased: BigNumber;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
        4: number;
        5: number;
        6: string;
        7: string;
        8: BigNumber;
      }[]
    >;

    isAdmin(player: string, overrides?: CallOverrides): Promise<boolean>;

    "isAdmin(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    perlinMax(overrides?: CallOverrides): Promise<number>;

    "perlinMax()"(overrides?: CallOverrides): Promise<number>;

    playerEmoji(arg0: string, overrides?: CallOverrides): Promise<string>;

    "playerEmoji(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    playerIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "playerIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    playerInited(player: string, overrides?: CallOverrides): Promise<boolean>;

    "playerInited(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    playerLocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "playerLocation(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    playerPerm(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "playerPerm(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seed(overrides?: CallOverrides): Promise<BigNumber>;

    "seed()"(overrides?: CallOverrides): Promise<BigNumber>;

    touchedCoords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "touchedCoords(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    validPlayerEmoji(arg0: string, overrides?: CallOverrides): Promise<string>;

    "validPlayerEmoji(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    vecs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "vecs(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    vecsDenom(overrides?: CallOverrides): Promise<number>;

    "vecsDenom()"(overrides?: CallOverrides): Promise<number>;

    whitelistedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "whitelistedContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    worldScale(overrides?: CallOverrides): Promise<BigNumber>;

    "worldScale()"(overrides?: CallOverrides): Promise<BigNumber>;

    worldWidth(overrides?: CallOverrides): Promise<BigNumber>;

    "worldWidth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canMoveSnow(player: string, overrides?: CallOverrides): Promise<BigNumber>;

    "canMoveSnow(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canMoveWater(player: string, overrides?: CallOverrides): Promise<BigNumber>;

    "canMoveWater(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canPutAnything(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canPutAnything(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractLocations(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContractLocations(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerIds(overrides?: CallOverrides): Promise<BigNumber>;

    "getPlayerIds()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayerInfos(overrides?: CallOverrides): Promise<BigNumber>;

    "getPlayerInfos()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayerLocation(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPlayerLocation(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTouchedTiles(overrides?: CallOverrides): Promise<BigNumber>;

    "getTouchedTiles()"(overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(player: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isAdmin(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    perlinMax(overrides?: CallOverrides): Promise<BigNumber>;

    "perlinMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    playerEmoji(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "playerEmoji(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "playerIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerInited(player: string, overrides?: CallOverrides): Promise<BigNumber>;

    "playerInited(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerLocation(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "playerLocation(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerPerm(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "playerPerm(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seed(overrides?: CallOverrides): Promise<BigNumber>;

    "seed()"(overrides?: CallOverrides): Promise<BigNumber>;

    touchedCoords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "touchedCoords(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validPlayerEmoji(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validPlayerEmoji(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vecs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vecs(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vecsDenom(overrides?: CallOverrides): Promise<BigNumber>;

    "vecsDenom()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistedContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worldScale(overrides?: CallOverrides): Promise<BigNumber>;

    "worldScale()"(overrides?: CallOverrides): Promise<BigNumber>;

    worldWidth(overrides?: CallOverrides): Promise<BigNumber>;

    "worldWidth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canMoveSnow(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canMoveSnow(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canMoveWater(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canMoveWater(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canPutAnything(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canPutAnything(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractLocations(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContractLocations(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPlayerIds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlayerInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPlayerInfos()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerLocation(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPlayerLocation(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTouchedTiles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTouchedTiles()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAdmin(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    perlinMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "perlinMax()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerEmoji(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerEmoji(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerInited(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerInited(address)"(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerLocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerLocation(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerPerm(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerPerm(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "seed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    touchedCoords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "touchedCoords(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validPlayerEmoji(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validPlayerEmoji(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vecs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vecs(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vecsDenom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vecsDenom()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistedContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    worldScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "worldScale()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    worldWidth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "worldWidth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
